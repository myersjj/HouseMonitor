<!DOCTYPE html>
<html lang="en">
<head>
<title>PiMonitorServer - Plot of logged temperature</title>
<meta name="description"
	content="Plot of temperature from DHT22 sensor connected to Raspberry Pi">
<meta name="author" content="James Myers">
<meta name="version" content="0.1">
<script src="http://code.jquery.com/jquery-1.8.3.min.js"
	type="text/javascript"></script>
<script src="//code.jquery.com/ui/1.11.3/jquery-ui.js" type="text/javascript"></script>
<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css">
<!-- Optional theme -->
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap-theme.min.css">
<script src="http://code.highcharts.com/highcharts.js"
	type="text/javascript"></script>
<script type="text/javascript">
var MAX_DUMP_DEPTH = 10;

function convertUTCDateToLocalDate(date) {
    var newDate = new Date(date.getTime()+date.getTimezoneOffset()*60*1000);

    var offset = date.getTimezoneOffset() / 60;
    var hours = date.getHours();

    newDate.setHours(hours - offset);

    return newDate;   
}

//Get data from server in JSON format .
function showLocations() {
    $
            .getJSON(
                    '/getLocations.json',
                    function(data) {
                        var i = 0;
                        // Iterate JSON data and display on screen
                        //console.log(dumpObj(data, "data", " ", 2));
                        //console.log(data.monitor_data.location_record[0][0].id);
                        if (data.monitor_data.location_record.length == 0) return;
                        $( "#locationsDiv" ).empty();
                        $( "<select id=\"locationId\" required>" ).insertAfter( "#locationsDiv" );
                        while (data.monitor_data.location_record[0][i]) {
                            var lid = data.monitor_data.location_record[0][i].Id;
                            var lname = data.monitor_data.location_record[0][i].LocationName;
                            var lstatus = data.monitor_data.location_record[0][i].status;
                            console.debug('location ' + lid +
                                    '=' + lname + ':');
                            var select = $('#locationId');
                            if (select.prop)
                                var options = select.prop('options');
                            else
                            	var options = select.attr('options');
                            console.debug('options=' + options);
                            options[options.length] = new Option(lname, lid, true, lstatus=='active');
                            i++;
                        }
                        //$( "</select>" ).insertAfter( "#locationId" );
                    });
}

    function getLocationId() {
    	return $("#locationId option:selected").val();
    }
    
    function getLocationName() {
        return $('#locationId option:selected').text();
    }
    
	function dumpObj(obj, name, indent, depth) {
		if (depth > MAX_DUMP_DEPTH) {
			return indent + name + ": <Maximum Depth Reached>\n";
		}
		if (typeof obj == "object") {
			var child = null;
			var output = indent + name + "\n";
			indent += "\t";
			for ( var item in obj)
			{
				try {
					child = obj[item];
				} catch (e) {
					child = "<Unable to Evaluate>";
				}
				if (typeof child == "object") {
					output += dumpObj(child, item, indent, depth + 1);
				} else {
					output += indent + item + ": " + child + "\n";
				}
			}
			return output;
		} else {
			return obj;
		}
	}

	var chart; // global chart variable
	// Get data from server in JSON format (query time series when sensor was outside).
	function getData(startDate, endDate) {
		$
				.getJSON(
						'/monitor_house.json?location_id=' + getLocationId() + '&num_obs=-1&start_date='
								+ startDate + '&end_date=' + endDate,
						function(data) {
							var seriesTemp = {
								id : 'seriesTemp',
								color : 'red',
								lineWidth : 3,
								name : 'DHT22 temperature (\u00B10.5\u00B0C)',
								type : 'line',
								data : []
							};
							var seriesHumidity = {
								id : 'seriesHumidity',
								color : 'green',
								lineWidth : 3,
								name : 'DHT22 humidity (\u00B12\u00B0%)',
								type : 'line',
								data : []
							};
							var seriesMotion = {
								id : 'seriesMotion',
								color : 'black',
								lineWidth : 3,
								name : 'PIR',
								type : 'line',
								data : [],
								step: 'left' // or 'center' or 'right'
							};
							var i = 0;
							// Iterate JSON data series and add to plot
							//console.log(dumpObj(data, "data", " ", 2));
							//console.log(dumpObj(data.monitor_data, "monitor_data", " ", 2));
							//console.log(dumpObj(data.monitor_data.temperature_record, "temp data", " ", 2)
							//		+ data.monitor_data.temperature_record);
							var temp_range = data.monitor_data.temperature_range;
							var humidity_range = data.monitor_data.humidity_range;
							//console.log(dumpObj(chart.options, "chart options", 2, 10));
							chart.options.yAxis[0].plotLines[0].value = temp_range[0];
							chart.options.yAxis[0].plotLines[1].value = temp_range[1];
							chart.options.yAxis[0].plotLines[2].value = humidity_range[0];
							chart.options.yAxis[0].plotLines[3].value = humidity_range[1];
							chart.setTitle(null, { text: 'for ' + getLocationName()});
							while (data.monitor_data.temperature_record[0][i]) {
								var mdate = new Date(data.monitor_data.temperature_record[0][i].Date);
								console.log('temp mdate=' + mdate);
								var ctime = mdate.getTime()/1000;  // time in ms converted to sec
								//console.log('record ' + i + ' + ctime=' + ctime);
								// convert time to midnight
								//ctime = ctime - (ctime % (60 * 60 * 24));
								for (var j = 0; j < 24; j += 1) {
									//console.log('ctime=' + ctime);
									var temp = parseFloat(data.monitor_data.temperature_record[0][i]['TempHour' + j]);
									if (temp > 0.0) {
										seriesTemp.data.push([ ctime * 1000,
												temp ]);
									}
									ctime += (60 * 60);
								}
								i++;
							}
							//console.log(dumpObj(data.monitor_data.humidity_record, 'humObj', ' ', 4));
							i = 0;
							while (data.monitor_data.humidity_record[0][i]) {
                                var mdate = new Date(data.monitor_data.humidity_record[0][i].Date);
                                console.log('hum mdate=' + mdate);
                                var ctime = mdate.getTime()/1000;  // time in ms converted to sec
                                //console.log('record ' + i + ' + ctime=' + ctime);
                                // convert time to midnight
                                //ctime = ctime - (ctime % (60 * 60 * 24));
                                for (var j = 0; j < 24; j += 1) {
                                    //console.log('ctime=' + ctime);
                                    var humidity = parseFloat(data.monitor_data.humidity_record[0][i]['HumidityHour' + j]);
                                    if (humidity > 0.0) {
                                        seriesHumidity.data.push([
                                                ctime * 1000, humidity ]);
                                    }
                                    ctime += (60 * 60);
                                }
                                i++;
                            }
							console.log('seriesHumidity=' + seriesHumidity.data);
							i = 0;
							while (data.monitor_data.motion_record[0][i]) {
								var ctime = parseInt(data.monitor_data.motion_record[0][i].unix_time);
								var today = new Date();
								var tz = today.getTimezoneOffset();
								//convert ctime from UTC to local
								var ltime = ctime - tz * 60;
								var motion = parseInt(data.monitor_data.motion_record[0][i].Status);
								//console.log('motion record ' + i + ' + ctime=' + ctime + ' status=' + motion);
								seriesMotion.data.push([ ltime * 1000, motion*25 ]);
								i++;
							}
							chart.addSeries(seriesTemp);
							chart.addSeries(seriesHumidity);
							chart.addSeries(seriesMotion);
						});
	}
	function doChart(startDate, endDate) {
		console.log('startDate=' + startDate + ' endDate=' + endDate);
		var d = new Date();
		chart = new Highcharts.Chart(
				{
					global: {
						useUTC : false,
						timezoneOffset : d.getTimezoneOffset()
					},
					chart : {
						renderTo : 'container',
						//type: 'spline',
						zoomType : 'x',
						spaceRight : 20,
						events : {
							load : getData(startDate, endDate)
						}
					},
					title : {
						text : 'Temperature/humidity/motion from Raspberry Pi logger'
					},
					subtitle : {
						text : 'for <location>',
						align : 'center',
					},

					xAxis : {
						type : 'datetime',
						tickPixelInterval : 150,
						maxZoom : 20 * 1000,
						title : {
							text : 'Time',
							margin : 15
						}
					},
					yAxis : {
						minPadding : 0.2,
						maxPadding : 0.2,
						showFirstLabel : false,
						title : {
							text : 'Temperature \u00B0F',
							margin : 15
						},
						plotLines: [{
					        id: 'limit-min-temp',
					        color: '#FF0000',
					        dashStyle: 'ShortDash',
					        width: 2,
					        value: 45,
					        zIndex: 0,
					        label : {
					            text : 'Minimum temperature'
					        }
					    }, {
					        id: 'limit-max-temp',
					        color: '#008000',
					        dashStyle: 'ShortDash',
					        width: 2,
					        value: 85,
					        zIndex: 0,
					        label : {
					            text : 'Maximum temperature'
					        }
					    },
					    {
					        id: 'limit-min-hum',
					        color: '#FF0000',
					        dashStyle: 'LongDash',
					        width: 2,
					        value: 25,
					        zIndex: 0,
					        label : {
					            text : 'Minimum humidity'
					        }
					    }, {
					        id: 'limit-max-hum',
					        color: '#008000',
					        dashStyle: 'LongDash',
					        width: 2,
					        value: 80,
					        zIndex: 0,
					        label : {
					            text : 'Maximum humidity'
					        }
					    }]
					},
					plotOptions : {
						area : {
							fillColor : {
								linearGradient : {
									x1 : 0,
									y1 : 0,
									x2 : 0,
									y2 : 1
								},
								stops : [
										[ 0, Highcharts.getOptions().colors[0] ],
										[ 1, 'rgba(2,0,0,0)' ], ]
							},
							lineWidth : 1,
							marker : {
								enabled : false,
								states : {
									hover : {
										enabled : true,
										radius : 5
									}
								}
							},
							shadow : false,
							states : {
								hover : {
									lineWidth : 1
								}
							},
							threshold : null
						},

					},
				})
	}
</script>

<script type="text/javascript">
	// Configure the plot
	$(document)
			.ready(
					function() {
						$( "#datepicker1" ).datepicker({
							  defaultDate: -7
							});
						$( "#datepicker1" ).datepicker("setDate", '0');
						$( "#datepicker2" ).datepicker({
							  defaultDate: +0
							});
						$( "#datepicker2" ).datepicker("setDate", '0');
						$("#dateButton").click( function()
						    {
								var sd, ed, fsd, fed;
								sd = $( "#datepicker1" ).datepicker("getDate");
								fsd = sd.toISOString().slice(0, 10);
								ed = $( "#datepicker2" ).datepicker("getDate");
								fed = ed.toISOString().slice(0, 10);
								doChart(fsd, fed);
						     }
						);
						$("#todayButton").click( function()
							{
							    var date = new Date();
								//console.debug('date=' + date);
								var tzoffset = date.getTimezoneOffset() * 60000; //offset in milliseconds
								var ldate = (new Date(date - tzoffset)).toISOString().slice(0,-1);
								//console.debug('ldate=' + ldate);
							    doChart(ldate.slice(0, 10), ldate.slice(0, 10));
							}
						);
						showLocations();
					});
</script>
</head>

<body>
    <h1>Monitor data for a location</h1>
	<div>
	   <div>Select Location: 
	       <div id="locationsDiv"></div>
           <a href="manageLocations.htm"><button id="manageLocations">Manage Locations</button></a>
	   </div>
	   <div>
		Start date: <input type="text" id="datepicker1">
		End Date: <input type="text" id="datepicker2">
		<button id="dateButton">Show data</button>
		<button id="todayButton">Today</button>
		</div>
	</div>
	<div id="container" style="width: 100%; height: 400px"></div>
</body>
</html>
